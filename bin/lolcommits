#!/usr/bin/env ruby

begin
  require 'lolcommits'
rescue LoadError
  require 'rubygems'
  require 'lolcommits'
end

include Lolcommits

#
# CHECK FOR FURTHER DEPENDENCIES
#

# which replacement http://stackoverflow.com/q/2108727
def command?(name)
  `which #{name}`
  $?.success?
end

if is_mac?
  # this dependency now satisfied with bundled copy of imagesnap
  #if not command?('imagesnap')
  #  puts "Couldn't find imagesnap in your PATH!"
  #  puts "Easiest way to get it is to install homebrew and do `brew install imagesnap`"
  #  exit 1
  #end
elsif is_linux?
  if not command?('mplayer')
    puts "Couldn't find mplayer in your PATH!"
    exit 1
  end
end

#
# NO ARGUMENTS SPECIFIED, HELP THE USER OUT
#
def do_noargs
  #TODO: make this a contextual helper to know status of whether lolcommits is enabled
  puts "Do what exactly?"
  puts "Try: lolcommits --enable   (when in a git repository)"
end

HOOK_PATH = File.join ".git", "hooks", "commit-msg"
HOOK_DIR = File.join ".git", "hooks"

ENABLE_DOC       = "#!/bin/sh\nlolcommits --capture=\"\$1\"\n"
ENABLE_IMGUR_DOC = "#!/bin/sh\nlolcommits --capture-imgur=\"\$1\"\n"
DOCS = [ENABLE_DOC, ENABLE_IMGUR_DOC]

#
# IF --ENABLE OR --ENABLE-IMGUR, DO ENABLE
#
def install_hook(hook_content)
  if not File.directory?(".git")
    puts "You don't appear to be in the base directory of a git project."
    exit 1
  end
  
  #its possible a hooks dir doesnt exist, so create it if so
  if not File.directory?(HOOK_DIR)
    Dir.mkdir(HOOK_DIR)
  end
  
  if File.exists? HOOK_PATH
    prev_doc_content = open(HOOK_PATH).read
    unless (DOCS - [hook_content]).include? prev_doc_content
      puts "A commit-msg hook already exists for this project."
      #TODO: disambiguate between OUR commit-msg hook and something else
      exit 1
    end
  end
  
  File.open(HOOK_PATH, 'w') {|f| f.write(hook_content) }
  FileUtils.chmod 0755, HOOK_PATH
  # we dont symlink, but rather install a small stub that calls the one from path
  # that way, as gem version changes, script updates even if new file thus breaking symlink
end

#
# IF --DISABLE, DO DISABLE
#
def do_disable
  if File.exists? HOOK_PATH
    #TODO: check if hook file has been modified before removing
    FileUtils.rm HOOK_PATH
    puts "removed #{HOOK_PATH}"
  else
    puts "lolcommits is not enabled for this directory, so there is nothing to uninstall."
  end
end


#
# IF --CAPTURE OR --CAPTURE-IMGUR, DO CAPTURE
#
def do_capture()
  msg_file = Choice.choices[:capture] || Choice.choices[:capture_imgur]
  capture_delay = Choice.choices[:delay] || ENV['LOLCOMMITS_DELAY'] || 0
  test_msg = Choice.choices[:msg]
  test_sha = Choice.choices[:sha]
  is_test = if Choice.choices[:test]
    puts "*** capturing in test mode"
    not not Choice.choices[:test]
  end

  img_file = Lolcommits.capture(msg_file, capture_delay, is_test, test_msg, test_sha)
  Lolcommits.upload_and_append_to_commit_msg(img_file, msg_file) if Choice.choices[:capture_imgur]
end


#
# Command line parsing fun
#
Choice.options do
  option :enable do
    long "--enable"
    short '-e'
    action do 
      install_hook(ENABLE_DOC) 
      puts "installed lolcommmit hook as:"
      puts "  -> #{File.expand_path(HOOK_PATH)}"
      puts "(to remove later, you can use: lolcommits --disable)"
    end
    desc "install lolcommits for this repo"
  end

  option :enable_imgur do
    long "--enable-imgur"
    short "-E"
    action do 
      install_hook(ENABLE_IMGUR_DOC)
      puts "installed lolcommmit(+imgur) hook as:"
      puts "  -> #{File.expand_path(HOOK_PATH)}"
      puts "(to remove later, you can use: lolcommits --disable)"
    end
    desc "install lolcommits for this repo, uploading to imgur.com"
  end
  
  option :disable do
    long "--disable"
    short '-d'
    action { do_disable }
    desc "uninstall lolcommits for this repo"
  end
  
  option :capture do
    long "--capture=MSGFILE"
    short 'c'
    cast String
    desc "capture lolcommit based on last git commit"
  end

  option :capture_imgur do
    long "--capture-imgur=MSGFILE"
    short 'C'
    cast String
    desc "capture lolcommit based on last git commit, and upload to imgur.com"
  end

  option :last do
    long "--last"
    short "-l"
    desc "view the most recent lolcommit"
    action do
      Launchy.open Lolcommits.most_recent
    end
  end
  
  option :browse do
    long "--browse"
    short "-b"
    desc "browse this repo's lolcommits"
    action do
      Launchy.open Lolcommits.loldir
    end
  end
  
  option :test do
    long "--test"
    desc "Run in test mode"
  end
  
  option :sha do
    desc "pass SHA manually (for test only)"
    long "--sha"
    short '-s'
    default "test-#{rand(10 ** 10)}"
  end
  
  option :msg do
    desc "pass commit msg manually (for test only)"
    long "--msg"
    short '-m'
    default "this is a test message i didnt really commit something"
  end

  option :delay do
    long "--delay=SECONDS"
    desc "delay taking of the snapshot by n seconds"
    cast Integer
    short '-w'
  end
end

#
if Choice.choices[:capture] or Choice.choices[:capture_imgur]
  do_capture()
end

